//If a becomes true in current clock tick then b must also become true in the next clock tick. 
//Evaluate the property on positive edge of the clock. Only Implication Operators and Boolean Operators are allowed.
module tb;
  reg a = 0, b = 1;
  reg clk = 0;
  
  always #5 clk = ~clk;  
  //always #2 en = ~en;
  
  initial begin
    a = 1;
    #7;
    a = 0;
    #30;
    a = 1; 
    #30;
    a = 1;
  end
  
    initial begin
    b = 1;
    #7;
    b = 0;
    #10;
    b = 1; 
    #30;
    b = 1;
  end
  
    A1: assert property (@(posedge clk) (a|=>b)) $info("Everything good %0t",$time); else $error("No!!!:%0t",$time);
  
initial begin
    $dumpfile("dump.vcd"); 
    $dumpvars;
    $assertvacuousoff(0);
    #100;
    $finish();
  end                              
endmodule

//*****************EXAMPLE-2*****************//
//Whenever a assert and b deassert then c must hold true in the next clock tick. 
//Evaluate the property on positive edge of the clock. Only Implication Operators and Boolean Operators are allowed.
module tb;
  reg a = 0, b = 1, c = 0;
  reg clk = 0;
  
  always #5 clk = ~clk;
  
  //always #2 en = ~en;
  
  initial begin
    a = 1;
    #10;
    a = 0;
    #10;
    a = 1; 
    #10;
    a = 0;
    #10;
    a = 1;
  end
  
  initial begin
    b = 0;
    #10;
    b = 1;
    #10;
    b = 0; 
    #10;
    b = 1;
    #10;
    a = 0;
  end
  
    initial begin
    c = 0;
    #13;
    c = 1;
    #10;
    c = 0; 
    #11;
    c = 1;
    #10;
    c = 0;
  end

  A1: assert property (@(posedge clk) (a && !b|=>c)) $info("Everything good %0t",$time); else $error("No!!!:%0t",$time);
  
  initial begin
    $dumpfile("dump.vcd"); 
    $dumpvars;
    $assertvacuousoff(0);
    #100;
    $finish();
  end
endmodule

//*********************EXAMPLE:3************************************//
A)When CE becomes high, it must remain high for 7 consecutive cycles. Evaluation of the property at positive edge of the clock signal.
B)1) If rst deassert and CE assert then rd must remain stable for two consecutive clock ticks.
  2) If rd assert then addr must remain stable for two consecutive clock ticks.
  3) Evaluate the property on positive edge of the clock.
/*
module tb; 
  reg ce = 0, clk = 0;
  always #5 clk = ~clk;
  
  
    
  initial begin
    $dumpfile("dump.vcd"); 
    $dumpvars;
    $assertvacuousoff(0);
    #100;
    $finish();
  end
  
initial begin
  ce = 0;
  #10;
  ce = 1;
  #20;
  ce = 1;
  #50;
  ce = 0;
 
end
  
  A3: assert property (@(posedge clk) $rose(ce) |-> ce[*7]); 
endmodule
*/
module tb;
  
  reg clk = 0, rd = 0, rst = 0, ce = 0;
  always #5 clk = ~clk;
  
  reg [7:0] addr;
  integer i = 0;
  
    
  initial begin
    $dumpfile("dump.vcd"); 
    $dumpvars;
    $assertvacuousoff(0);
    #100;
    $finish();
  end
  
initial begin
  rst = 1;
  #10;
  ce = 1;
  rst = 0;
  #30;
  rd =1;
  #20;
  rd = 0;
end
  
  initial begin
    for( i = 0 ; i < 5; i++) begin
      addr = $urandom();
      @(posedge clk);
      @(posedge clk);
    end
    
      for( i = 0 ; i < 5; i++) begin
      addr = $urandom();
      @(posedge clk);
    end  
  end
  
  A4: assert property (@(posedge clk) ($fell(rst) && $rose(ce)) |->  rd[*2]);
    A5: assert property (@(posedge clk) $rose(rd) |-> $stable(addr)[*2]);
    
endmodule
